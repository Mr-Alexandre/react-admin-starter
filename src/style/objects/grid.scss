@mixin make-container($gutter: $grid-gutter-width) {
	width: 100%;
	padding-right: $gutter / 2;
	padding-left: $gutter / 2;
	margin-right: auto;
	margin-left: auto;
}

@mixin make-row($gutter: $grid-gutter-width) {
	display: flex;
	flex-wrap: wrap;
	margin-right: -$gutter / 2;
	margin-left: -$gutter / 2;
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

// Single container class with breakpoint max-widths
.o-container {
	@include make-container();
	@include make-container-max-widths();
}

// 100% wide container at all breakpoints
.o-container-fluid {
	@include make-container();
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
	.o-container-#{$breakpoint} {
		@extend .o-container-fluid;
	}

	@include media-breakpoint-up($breakpoint, $grid-breakpoints) {
		%responsive-container-#{$breakpoint} {
			max-width: $container-max-width;
		}

		// Extend each breakpoint which is smaller or equal to the current breakpoint
		$extend-breakpoint: true;

		@each $name, $width in $grid-breakpoints {
			@if ($extend-breakpoint) {
				.o-container#{breakpoint-infix($name, $grid-breakpoints)} {
					@extend %responsive-container-#{$breakpoint};
				}

				// Once the current breakpoint is reached, stop extending
				@if ($breakpoint == $name) {
					$extend-breakpoint: false;
				}
			}
		}
	}
}

// Row
//
// Rows contain your columns.

.o-row {
	@include make-row();
}

// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.o-row_no-gutters {
	margin-right: 0;
	margin-left: 0;

	> .o-col,
	> [class*='o-col-'] {
		padding-right: 0;
		padding-left: 0;
	}
}

// Columns
//
// Common styles for small and large grid columns

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns(
	$columns: $grid-columns,
	$gutter: $grid-gutter-width,
	$breakpoints: $grid-breakpoints
) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		padding-right: $gutter / 2;
		padding-left: $gutter / 2;
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@if $columns > 0 {
			// Allow columns to stretch full width below their breakpoints
			@for $i from 1 through $columns {
				.o-col#{$infix}-#{$i} {
					@extend %grid-column;
				}
			}
		}

		.o-col#{$infix},
		.o-col#{$infix}-auto {
			@extend %grid-column;
		}

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.o-col#{$infix} {
				flex-basis: 0;
				flex-grow: 1;
				min-width: 0; // See https://github.com/twbs/bootstrap/issues/25410
				max-width: 100%;
			}

			@if $grid-row-columns > 0 {
				@for $i from 1 through $grid-row-columns {
					.o-row-cols#{$infix}-#{$i} {
						@include row-cols($i);
					}
				}
			}

			.o-col#{$infix}-auto {
				@include make-col-auto();
			}

			@if $columns > 0 {
				@for $i from 1 through $columns {
					.o-col#{$infix}-#{$i} {
						@include make-col($i, $columns);
					}
				}
			}

			.o-order#{$infix}-first {
				order: -1;
			}

			.o-order#{$infix}-last {
				order: $columns + 1;
			}

			@for $i from 0 through $columns {
				.o-order#{$infix}-#{$i} {
					order: $i;
				}
			}

			@if $columns > 0 {
				// `$columns - 1` because offsetting by the width of an entire row isn't possible
				@for $i from 0 through ($columns - 1) {
					@if not($infix == '' and $i == 0) {
						// Avoid emitting useless .offset-0
						.o-offset#{$infix}-#{$i} {
							@include make-col-offset($i, $columns);
						}
					}
				}
			}
		}
	}
}

@include make-grid-columns();
